# Generated by Django 5.0.3 on 2024-04-03 19:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('link', models.URLField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('likes_count', models.IntegerField()),
                ('created_on', models.DateTimeField()),
                ('modified_on', models.DateTimeField()),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='event_management.eventtag')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='event_management.eventtype')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('biography', models.TextField()),
                ('phone', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('followers_count', models.IntegerField(default=0)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(related_name='user_profiles', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='user_profiles', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LikedEvents',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('liked_on', models.DateTimeField()),
                ('event_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='event_management.event')),
                ('owner_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='liked_events', to='event_management.userprofile')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='created_by_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='events_created', to='event_management.userprofile'),
        ),
        migrations.AddField(
            model_name='event',
            name='modified_by_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='events_modified', to='event_management.userprofile'),
        ),
    ]
